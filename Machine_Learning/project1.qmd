---
title: "Client Report - What Do People See in Romance?"
subtitle: "Course DS 250"
author: "Jason McGraw"
format:
  html:
    self-contained: true
    page-layout: full
    title-block-banner: true
    toc: true
    toc-depth: 3
    toc-location: body
    number-sections: false
    html-math-method: katex
    code-fold: true
    code-summary: "Show the code"
    code-overflow: wrap
    code-copy: hover
    code-tools:
        source: false
        toggle: true
        caption: See code
execute: 
  warning: false
    
---

Have you ever wondered what you could do to increase your chances of getting a date? What makes someone desireable? I'm here to answer those questions using data science! The first question I would like to ask is...

# What variables are important to getting asked out?
In order to answer this question I'm going to use a machine learning model to take in data, then I'll have it tell us what factors went into it's predicitons. Follow me.
```{python}
## Import libraries and data frame.
import numpy as np
import pandas as pd
from lets_plot import *

df = pd.read_csv("https://raw.githubusercontent.com/datasets/speed-dating/refs/heads/main/data/speed-dating.csv")
# Information of data set https://www.openml.org/search?type=data&sort=runs&id=40536&status=active
LetsPlot.setup_html()
```



```{python}
## Make a new data frame using the data I want to test for.
# pref_o* = the preference of thier partner (0-100)
# attractive and other rows = how they see themselves (0-10)
# decision_o* = whether or not the partner asked them out (yes or no)
self_rate = df[['pref_o_attractive'
              , 'pref_o_sincere'
              , 'pref_o_intelligence'
              , 'pref_o_funny'
              , 'pref_o_ambitious'
            #  , 'pref_o_shared_interests'
              , 'attractive'
              , 'sincere'
              , 'intelligence'
              , 'funny'
              , 'ambition'
              , 'decision_o'
              ]]
```


```{python}
## Data clean up
self_rate.iloc[:,0:5] = self_rate.iloc[:,0:5].apply(lambda x: x / 10)
```

```{python}
## Split data into train and test sections for machine learning.
import sklearn
from sklearn.model_selection import train_test_split

x = self_rate.drop(columns = ['decision_o'])
y = self_rate['decision_o']

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = .2)
# CHANGE don't include random state in final project
```

```{python}
## Teach machine learning model using the train values.
from sklearn.ensemble import RandomForestClassifier

classifier = RandomForestClassifier() # what classifier I'm using, and it's params

classifier.fit(x_train, y_train) # what the classifier is testing(x_train) and predicting(y_train)
```
Below is the accuracy of the machine learning model. The numbers by the 1 is how good the model is at predicting if someone got asked out, and the numbers by the 0 is the model's ability to predict if someone didn't get asked out. So, the model is better at predicting if someone didn't get asked out. This will play a role in the data later.
```{python}
## Show accuracy of the model.
predictions = classifier.predict(x_test)

from sklearn.metrics import classification_report

print(classification_report(y_test, predictions))
```

```{python}
## Show what variables were most important for the model.
features = x.columns
importance = classifier.feature_importances_
data_group = {'Feature': features, 'Importance': importance}

importance_chart = pd.DataFrame(data_group)
importance_chart = importance_chart.sort_values('Importance').head(10)
```
Below is a graph showing which features were most important to predict whether or not someone was asked out after speed dating. The variables titled 'pref_o_...' are traits the Dater's partner said they were looking for, and the other traits are what the Dater rated themself out of 10.
```{python}
## Graph the importance levels to show what variables were most important.
(
  ggplot(importance_chart, aes('Importance', 'Feature')) 
  + geom_bar(stat = 'identity')
  + labs(
    title='Predictive Variables For Being Asked Out'
  )
)
```
This graph shows that the preferences of someone's partner durring speed dating were a better predictor on how likely they were to being asked out, rather than how they saw themselves. In other words "Beauty is in the eye of the beholder" applies to speed dating. But this graph doesn't show what traits are more desirable than others. Let's explore that next.

# Do people who rate themselves highly on desireable traits get asked out more?

```{python}
## Isolate the self proclaimed attributes (such as how attractive someone thinks they are)
self_proclaim = self_rate
self_proclaim['average of proclaimed attributes'] = self_rate.loc[:,self_rate.iloc[:,5:10].columns].sum(axis = 1)
```

```{python}
## Make a chart with the mean values of people that got asked out VS. people that didn't.
self_proclaim =self_proclaim.groupby('decision_o', as_index=False).mean()


self_proclaim['decision of partner'] = self_proclaim['decision_o'].apply(lambda x: 'yes' if x == 1 else 'no')

self_proclaim[['decision of partner', 'average of proclaimed attributes']]
```
The above Table shows the mean number of all the traits someone rated themselves with (out of how attractive, sincere, intelligent, funny, and ambitious they were) grouped by whether or not they were asked out. It shows that the people that rated themselves high on those traits were just as likely to get asked out as the people that rated themselves low. This means that when speed dating the ammount of people that ask you out isn't dependent on what kind of person you think you are. Which means that if you're self consious and beat yourself up, don't. You're still just as attractive to speed daters.