---
title: "Client Report - What Do People See in Romance?"
subtitle: "Course DS 250"
author: "Jason McGraw"
format:
  html:
    self-contained: true
    page-layout: full
    title-block-banner: true
    toc: true
    toc-depth: 3
    toc-location: body
    number-sections: false
    html-math-method: katex
    code-fold: true
    code-summary: "Show the code"
    code-overflow: wrap
    code-copy: hover
    code-tools:
        source: false
        toggle: true
        caption: See code
execute: 
  warning: false
    
---

## Import libraries and data frame.
```{python}
import numpy as np
import pandas as pd
from lets_plot import *

df = pd.read_csv("https://raw.githubusercontent.com/datasets/speed-dating/refs/heads/main/data/speed-dating.csv")
# Information of data set https://www.openml.org/search?type=data&sort=runs&id=40536&status=active
LetsPlot.setup_html()
```

## Make a new data frame using the data I want to test for.

# pref_o* = the preference of thier partner (0-100)
# attractive and other rows = how they see themselves (0-10)
# decision_o* = whether or not the partner asked them out (yes or no)
```{python}

self_rate = df[['pref_o_attractive'
              , 'pref_o_sincere'
              , 'pref_o_intelligence'
              , 'pref_o_funny'
              , 'pref_o_ambitious'
            #  , 'pref_o_shared_interests'
              , 'attractive'
              , 'sincere'
              , 'intelligence'
              , 'funny'
              , 'ambition'
              , 'decision_o'
              ]]
# CHANGE test to see if their qualities and what the partner asked for lead to the partner choosing them
# CHANGE test to see if people that rate themselves high on everything were more or less likely than people that rated themselves as low (to see acuracy of their traits)
# What if having a low bar on who you would ask out was the deciding factor
```

## Data clean up
```{python}
self_rate.iloc[:,0:5] = self_rate.iloc[:,0:5].apply(lambda x: x / 10)

self_rate.head()
```

## Split data into train and test sections for machine learning.
```{python}
import sklearn
from sklearn.model_selection import train_test_split

x = self_rate.drop(columns = ['decision_o'])
y = self_rate['decision_o']

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = .2)
# CHANGE don't include random state in final project
```

## Teach machine learning model using the train values.
```{python}
from sklearn.ensemble import RandomForestClassifier

classifier = RandomForestClassifier() # what classifier I'm using, and it's params

classifier.fit(x_train, y_train) # what the classifier is testing(x_train) and predicting(y_train)
```

## Show accuracy of the model.
```{python}
predictions = classifier.predict(x_test)

from sklearn.metrics import classification_report

print(classification_report(y_test, predictions))
```

## Show what variables were most important for the model.
```{python}
# Include and execute your code here
features = x.columns
importance = classifier.feature_importances_
data_group = {'Feature': features, 'Importance': importance}

importance_chart = pd.DataFrame(data_group)
importance_chart = importance_chart.sort_values('Importance').head(10)
```
## Graph the importance levels to show what variables were most important.
```{python}
(
  ggplot(importance_chart, aes('Importance', 'Feature')) 
  + geom_bar(stat = 'identity')
  + labs(
    title='Predictive Variables For Being Asked Out'
  )
)
```
This graph shows that the preferences of someone's partner durring speed dating were a better predictor on how likely they were to being asked out, than how they saw themselves. "Beauty is in the eye of the beholder."

Do people who rate themselves highly on desireable traits get asked out more?

```{python}
# Isolate the self proclaimed attributes (such as how attractive someone thinks they are)
self_proclaim = self_rate
self_proclaim['proclaimed attributes'] = self_rate.loc[:,self_rate.iloc[:,5:10].columns].sum(axis = 1)
```

```{python}
# Make a chart with the mean values of people that got asked out VS. people that didn't.
self_proclaim =self_proclaim.groupby('decision_o', as_index=False).mean()


self_proclaim['decision of partner'] = self_proclaim['decision_o'].apply(lambda x: 'yes' if x == 1 else 'no')

self_proclaim[['decision of partner', 'proclaimed attributes']]
```
The above Table shows the mean number of all the traits someone rated themselves with (out of how attractive, sincere, intelligent, funny, and ambitious they were) grouped by whether or not they were asked out. It shows that the people that rated themselves high on those traits were just as likely to get asked out as the people that rated themselves low. This means that when speed dating the ammount of people that ask you out isn't dependent on what kind of person you think you are.